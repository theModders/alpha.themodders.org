{"version":3,"sources":["../../../server/forum/notifier.js"],"names":["utils","require","OBSOLETE_TOKEN_ERROR_CODES","PROFILE_PIC_PLACEHOLDER_URL","NOTIFICATION_TARGET_URL","process","env","GCLOUD_PROJECT","module","exports","Notifier","constructor","firestore","messaging","fcmTokens","collection","sendNotifications","messageSnapshot","tokenIds","_getTokenIds","length","payload","_createPayload","data","response","sendToDevice","_cleanupTokens","message","notification","title","name","body","truncate","text","icon","profilePicUrl","click_action","retrievedTokens","get","forEach","token","push","id","sendResponse","asyncTasks","results","result","index","error","indexOf","code","tokenId","deleteTask","doc","delete","console","warn","Promise","all"],"mappings":";;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AAEA,MAAMC,0BAA0B,GAAG,CAClC,sCADkC,EAElC,6CAFkC,CAAnC;AAIA,MAAMC,2BAA2B,GAAG,iCAApC;AACA,MAAMC,uBAAuB,GAAI,WAAUC,OAAO,CAACC,GAAR,CAAYC,cAAe,UAAtE;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,CAAe;AAC/BC,EAAAA,WAAW,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACjC,SAAKC,SAAL,GAAiBF,SAAS,CAACG,UAAV,CAAqB,WAArB,CAAjB;AACA,SAAKF,SAAL,GAAiBA,SAAjB;AACA;;AAED,QAAMG,iBAAN,CAAwBC,eAAxB,EAAyC;AACxC,UAAMC,QAAQ,GAAG,MAAM,KAAKC,YAAL,EAAvB;;AACA,QAAID,QAAQ,CAACE,MAAT,IAAmB,CAAvB,EAA0B;AACzB;AACA;;AACD,UAAMC,OAAO,GAAG,KAAKC,cAAL,CAAoBL,eAAe,CAACM,IAAhB,EAApB,CAAhB;;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKX,SAAL,CAAeY,YAAf,CAA4BP,QAA5B,EAAsCG,OAAtC,CAAvB;AACA,UAAM,KAAKK,cAAL,CAAoBF,QAApB,EAA8BN,QAA9B,CAAN;AACA;;AAIDI,EAAAA,cAAc,CAACK,OAAD,EAAU;AACvB,WAAO;AACNC,MAAAA,YAAY,EAAE;AACbC,QAAAA,KAAK,EAAG,GAAEF,OAAO,CAACG,IAAK,mBADV;AAEbC,QAAAA,IAAI,EAAE/B,KAAK,CAACgC,QAAN,CAAeL,OAAO,CAACM,IAAvB,EAA6B,GAA7B,CAFO;AAGbC,QAAAA,IAAI,EAAEP,OAAO,CAACQ,aAAR,IAAyBhC,2BAHlB;AAIbiC,QAAAA,YAAY,EAAEhC;AAJD;AADR,KAAP;AAQA;;AAED,QAAMe,YAAN,GAAqB;AACpB,UAAMkB,eAAe,GAAG,MAAM,KAAKvB,SAAL,CAAewB,GAAf,EAA9B;AACA,UAAMpB,QAAQ,GAAG,EAAjB;AACAmB,IAAAA,eAAe,CAACE,OAAhB,CAAyBC,KAAD,IAAWtB,QAAQ,CAACuB,IAAT,CAAcD,KAAK,CAACE,EAApB,CAAnC;AACA,WAAOxB,QAAP;AACA;;AAEDQ,EAAAA,cAAc,CAACiB,YAAD,EAAezB,QAAf,EAAyB;AACtC,UAAM0B,UAAU,GAAG,EAAnB;AACAD,IAAAA,YAAY,CAACE,OAAb,CAAqBN,OAArB,CAA6B,CAACO,MAAD,EAASC,KAAT,KAAmB;AAC/C,UAAI,CAAED,MAAM,CAACE,KAAb,EAAoB;AACnB;AACA;;AACD,UAAI9C,0BAA0B,CAAC+C,OAA3B,CAAmCH,MAAM,CAACE,KAAP,CAAaE,IAAhD,KAAyD,CAA7D,EAAgE;AAC/D,cAAMC,OAAO,GAAGjC,QAAQ,CAAC6B,KAAD,CAAxB;AACA,cAAMK,UAAU,GAAG,KAAKtC,SAAL,CAAeuC,GAAf,CAAmBF,OAAnB,EAA4BG,MAA5B,EAAnB;AACAV,QAAAA,UAAU,CAACH,IAAX,CAAgBW,UAAhB;AACA,OAJD,MAIO;AACNG,QAAAA,OAAO,CAACC,IAAR,CAAa,6BAAb,EAA4CV,MAAM,CAACE,KAAnD,EAA0DG,OAA1D;AACA;AACD,KAXD;AAYA,WAAOM,OAAO,CAACC,GAAR,CAAYd,UAAZ,CAAP;AACA;;AAnD8B,CAAhC","sourcesContent":["const utils = require('./utils.js');\n\nconst OBSOLETE_TOKEN_ERROR_CODES = [ \n\t\"messaging/invalid-registration-token\",\n\t\"messaging/registration-token-not-registered\"\n];\nconst PROFILE_PIC_PLACEHOLDER_URL = \"/images/profile_placeholder.png\"\nconst NOTIFICATION_TARGET_URL = `https://${process.env.GCLOUD_PROJECT}.web.app`;\n\nmodule.exports = class Notifier {\n\tconstructor(firestore, messaging) {\n\t\tthis.fcmTokens = firestore.collection(\"fcmTokens\");\n\t\tthis.messaging = messaging;\n\t}\n\n\tasync sendNotifications(messageSnapshot) {\n\t\tconst tokenIds = await this._getTokenIds();\n\t\tif (tokenIds.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst payload = this._createPayload(messageSnapshot.data());\n\t\tconst response = await this.messaging.sendToDevice(tokenIds, payload);\n\t\tawait this._cleanupTokens(response, tokenIds);\n\t}\n\n\n\t\n\t_createPayload(message) {\n\t\treturn {\n\t\t\tnotification: {\n\t\t\t\ttitle: `${message.name} posted a message`,\n\t\t\t\tbody: utils.truncate(message.text, 100),\n\t\t\t\ticon: message.profilePicUrl || PROFILE_PIC_PLACEHOLDER_URL,\n\t\t\t\tclick_action: NOTIFICATION_TARGET_URL\n\t\t\t}\n\t\t}\n\t}\n\t\n\tasync _getTokenIds() {\n\t\tconst retrievedTokens = await this.fcmTokens.get();\n\t\tconst tokenIds = [];\n\t\tretrievedTokens.forEach((token) => tokenIds.push(token.id));\n\t\treturn tokenIds;\n\t}\n\t\n\t_cleanupTokens(sendResponse, tokenIds) {\n\t\tconst asyncTasks = [];\n\t\tsendResponse.results.forEach((result, index) => {\n\t\t\tif (! result.error) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (OBSOLETE_TOKEN_ERROR_CODES.indexOf(result.error.code) >= 0) {\n\t\t\t\tconst tokenId = tokenIds[index];\n\t\t\t\tconst deleteTask = this.fcmTokens.doc(tokenId).delete();\n\t\t\t\tasyncTasks.push(deleteTask);\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"failed to send notification\", result.error, tokenId);\n\t\t\t}\n\t\t});\n\t\treturn Promise.all(asyncTasks); \n\t}\n}\n"],"file":"notifier.js"}